
Timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001a3  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  000001b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b26  00000000  00000000  00000209  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000668  00000000  00000000  00000d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029d  00000000  00000000  00001397  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001634  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022d  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  000018ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001936  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000f2  000000f2  00000166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001970  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000014  000000c4  000000c4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.TIMER1_clear 0000002e  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.TIMER1_set 00000012  000000d8  000000d8  0000014c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.TIMER1_start 00000008  000000ea  000000ea  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  000000fa  000000fa  0000016e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  000000fc  000000fc  00000170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  000000fe  000000fe  00000172  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  000000ae  000000ae  00000122  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  000000f6  000000f6  0000016a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   8:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  10:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  14:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  18:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  1c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  20:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  24:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  28:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  2c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  30:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  34:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  38:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  3c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  40:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  44:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  48:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  4c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  50:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  54:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  58:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  5c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  60:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  78:	0c 94 57 00 	jmp	0xae	; 0xae <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000000f2 <__bad_interrupt>:
  f2:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000c4 <main>:
#include <avr/interrupt.h>
#include "Timer1.h"

int main(void)
{
	DDRB = 0b11111111;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	84 b9       	out	0x04, r24	; 4
	
	sei();
  c8:	78 94       	sei
	
	TIMER1_clear();
  ca:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
    TIMER1_set();
  ce:	0e 94 6c 00 	call	0xd8	; 0xd8 <TIMER1_set>
	TIMER1_start();
  d2:	0e 94 75 00 	call	0xea	; 0xea <TIMER1_start>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x12>

Disassembly of section .text.TIMER1_clear:

00000080 <TIMER1_clear>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "Timer1.h"

extern void TIMER1_clear() {
	TCCR1A = 0; TCCR1B = 0;
  80:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  84:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCNT1  = 0; ICR1   = 0;
  88:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  8c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  90:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  94:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A  = 0; OCR1B  = 0;
  98:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  9c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  a0:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  a4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TIMSK1 = 0;
  a8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  ac:	08 95       	ret

Disassembly of section .text.TIMER1_set:

000000d8 <TIMER1_set>:
}

extern void TIMER1_set() {
	TCCR1A = TCCR1A_start;
  d8:	80 e4       	ldi	r24, 0x40	; 64
  da:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = TCCR1B_start_OFF;
  de:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = TIMSK1_start;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
  e8:	08 95       	ret

Disassembly of section .text.TIMER1_start:

000000ea <TIMER1_start>:
}

extern void TIMER1_start() {
	TCCR1B = TCCR1B_start_ON;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  f0:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000000fa <_fini>:
  fa:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000fc <__funcs_on_exit>:
  fc:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000fe <__simulator_exit>:
  fe:	08 95       	ret

Disassembly of section .text.exit:

000000ae <exit>:
  ae:	ec 01       	movw	r28, r24
  b0:	0e 94 7e 00 	call	0xfc	; 0xfc <__funcs_on_exit>
  b4:	0e 94 7d 00 	call	0xfa	; 0xfa <_fini>
  b8:	ce 01       	movw	r24, r28
  ba:	0e 94 7f 00 	call	0xfe	; 0xfe <__simulator_exit>
  be:	ce 01       	movw	r24, r28
  c0:	0e 94 7b 00 	call	0xf6	; 0xf6 <_Exit>

Disassembly of section .text._Exit:

000000f6 <_Exit>:
  f6:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
